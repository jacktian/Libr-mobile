(function() {
  var IonicUtils, libr;

  libr = angular.module('libr.services.utils', []);

  IonicUtils = (function() {
    IonicUtils.$inject = ['$timeout'];

    function IonicUtils($timeout) {
      this.$timeout = $timeout;
    }

    IonicUtils.prototype.initCustomLoading = function(scope) {
      return scope.data = {
        isLoading: false,
        text: null
      };
    };

    IonicUtils.prototype.showLoading = function(scope, text, timing) {
      if (timing == null) {
        timing = 3000;
      }
      scope.data = {
        isLoading: true,
        text: text
      };
      return this.$timeout((function(_this) {
        return function() {
          return _this.initCustomLoading(scope);
        };
      })(this), timing);
    };

    return IonicUtils;

  })();

  libr.service('IonicUtils', IonicUtils);

}).call(this);

(function() {
  var LocalStorageUtils, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.services.localstorage', []);

  LocalStorageUtils = (function() {
    var user;

    user = null;

    function LocalStorageUtils() {
      this.getUserId = __bind(this.getUserId, this);
      user = JSON.parse(localStorage.getItem('user'));
    }

    LocalStorageUtils.prototype.getUserId = function() {
      return user.id;
    };

    LocalStorageUtils.prototype.getUserName = function() {
      return user.name;
    };

    LocalStorageUtils.prototype.getUserToken = function() {
      return user.token;
    };

    LocalStorageUtils.prototype.getUserAvatar = function() {
      return user.avatar;
    };

    LocalStorageUtils.prototype.getUserEmail = function() {
      return user.email;
    };

    return LocalStorageUtils;

  })();

  libr.service('LocalStorageUtils', LocalStorageUtils);

}).call(this);

(function() {
  var ErrorHandler, libr;

  libr = angular.module('libr.handlers.errorHandler', []);

  ErrorHandler = (function() {
    function ErrorHandler() {}

    ErrorHandler.prototype.loadingHandler = function($scope, callback) {
      var message;
      $scope.loading.hide();
      message = '加载失败，请确认有良好网络连接，并重试';
      return navigator.notification.confirm(message, (function(_this) {
        return function() {
          return callback();
        };
      })(this), '加载失败', ['确定', '取消']);
    };

    ErrorHandler.prototype.whenError = function(callback) {
      var message;
      message = '加载失败，请确认有良好网络连接，并重试';
      return navigator.notification.confirm(message, (function(_this) {
        return function() {
          return callback();
        };
      })(this), '加载失败', ['确定', '取消']);
    };

    return ErrorHandler;

  })();

  libr.service('ErrorHandler', ErrorHandler);

}).call(this);

(function() {
  var AuthicationService, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.services.auth', []);

  AuthicationService = (function() {
    AuthicationService.$inject = ['$http', 'Constant'];

    function AuthicationService($http, Constant) {
      this.$http = $http;
      this.Constant = Constant;
      this.register = __bind(this.register, this);
      this.login = __bind(this.login, this);
      console.log('init auth service');
    }

    AuthicationService.prototype.login = function(user, callback, errorCallback) {
      var baseUrl;
      baseUrl = this.Constant.baseUrl + '/sessions';
      return this.$http({
        method: 'POST',
        url: baseUrl,
        data: "user[email]=" + user.email + "&user[password]=" + user.password,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }).success(function(result) {
        if (result.success) {
          return callback(result);
        } else {
          return errorCallback('登录失败,请输入正确的用户名和密码');
        }
      }).error(function(data) {
        return errorCallback('登录失败,请输入正确的用户名和密码');
      });
    };

    AuthicationService.prototype.register = function(user, callback, onError) {
      var url;
      url = this.Constant.baseUrl + '/registrations';
      return this.$http({
        method: 'POST',
        url: url,
        data: "user[email]=" + user.email + "&user[password]=" + user.password,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }).success(function(result, status) {
        return callback(result, status);
      }).error(function(data, status) {
        return onError(data);
      });
    };

    return AuthicationService;

  })();

  libr.service('AuthService', AuthicationService);

}).call(this);

(function() {
  var Books, libr;

  libr = angular.module('libr.services.books', ['ngResource']);

  Books = (function() {
    Books.$inject = ['$http', '$resource', 'Constant', 'LocalStorageUtils'];

    function Books($resource, Constant, LocalStorageUtils) {
      var url;
      this.$resource = $resource;
      this.Constant = Constant;
      this.LocalStorageUtils = LocalStorageUtils;
      url = this.Constant.baseUrl + '/users/:user_id/books/:book_id';
      return this.$resource(url, {
        user_email: this.LocalStorageUtils.getUserEmail(),
        user_token: this.LocalStorageUtils.getUserToken(),
        user_id: this.LocalStorageUtils.getUserId(),
        book_id: '@bookId'
      }, {
        'get': {
          cache: true,
          method: 'GET'
        },
        'query': {
          method: 'GET',
          isArray: false,
          cache: false
        },
        'fetchNew': {
          method: 'GET',
          isArray: false,
          cache: true,
          url: this.Constant.baseUrl + '/books/newbooks/:afterId'
        }
      });
    }

    return Books;

  })();

  libr.factory('Books', ['$resource', 'Constant', 'LocalStorageUtils', Books]);

}).call(this);

(function() {
  var CommentService, libr;

  libr = angular.module('libr.services.comment', ['ngResource']);

  CommentService = (function() {
    CommentService.$inject = ['$http', '$resource', 'Constant'];

    function CommentService($resource, Constant) {
      var baseUrl;
      this.$resource = $resource;
      this.Constant = Constant;
      baseUrl = this.Constant.baseUrl + '/books/:book_id/comments/:comment_id';
      return this.$resource(baseUrl, {
        user_email: localStorage.getItem('email'),
        user_token: localStorage.getItem('token'),
        book_id: '@bookId',
        comment_id: '@commentId'
      }, {
        'query': {
          method: 'GET',
          isArray: true,
          cache: false
        }
      }, {
        'save': {
          params: {
            comment_id: '@commentId'
          }
        }
      });
    }

    return CommentService;

  })();

  libr.factory('Comments', ['$resource', 'Constant', CommentService]);

}).call(this);

(function() {
  var DoubanService, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.services.douban', []);

  DoubanService = (function() {
    DoubanService.$inject = ['$http', 'Constant', 'LocalStorageUtils'];

    function DoubanService($http, Constant, LocalStorageUtils) {
      this.$http = $http;
      this.Constant = Constant;
      this.LocalStorageUtils = LocalStorageUtils;
      this.submitUser = __bind(this.submitUser, this);
    }

    DoubanService.prototype.userInfo = function(user, callback, error) {
      return this.$http({
        url: "http://api.douban.com/v2/user/" + user,
        method: 'GET',
        timeout: 10000
      }).success(function(data, status, headers, config) {
        if (status === 200) {
          return callback(data);
        } else {
          return error(data);
        }
      }).error(function(data) {
        return error(data);
      });
    };

    DoubanService.prototype.submitUser = function(user, callback, error) {
      var email, token, userId;
      email = localStorage.getItem('email');
      token = localStorage.getItem('token');
      userId = this.LocalStorageUtils.getUserId();
      return this.$http({
        url: "" + this.Constant.baseUrl + "/users/" + userId + "/link/douban/" + user + "?user_email=" + email + "&user_token=" + token,
        method: 'POST',
        timeout: 10000
      }).success(function(data, status, headers, config) {
        return callback(data);
      }).error(function(data) {
        return error(data);
      });
    };

    return DoubanService;

  })();

  libr.service('DoubanService', DoubanService);

}).call(this);

(function() {
  var GeolocationService, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.services.geolocation', []);

  GeolocationService = (function() {
    var getLocation, onError, onSuccess;

    GeolocationService.$inject = ['$http', 'Constant'];

    function GeolocationService($http, Constant) {
      this.$http = $http;
      this.Constant = Constant;
      this.getDetailAddress = __bind(this.getDetailAddress, this);
    }

    onSuccess = function(position) {
      alert('lat' + position.coords.latitude);
      return {
        "Latitude": position.coords.latitude,
        "Longitude": position.coords.longitude,
        "Altitude": position.coords.altitude,
        "Accuracy": position.coords.accuracy,
        "Altitude Accuracy": position.coords.altitudeAccuracy,
        "Heading": position.coords.heading,
        "Speed": position.coords.speed,
        "Timestamp": position.timestamp
      };
    };

    onError = function(error) {
      throw "code:  " + error.code + " \n message: " + error.message;
    };

    GeolocationService.prototype.getCurrentLocation = function(callback, error) {
      return navigator.geolocation.getCurrentPosition(callback, error);
    };

    GeolocationService.prototype.getDetailAddress = function(callback, error) {
      var baseUrl;
      baseUrl = this.Constant.baseUrl + '/locations/detail';
      return this.getCurrentLocation((function(_this) {
        return function(position) {
          return _this.$http({
            url: "" + baseUrl + "?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude,
            cache: true,
            method: 'GET'
          }).success(function(data, status, headers, config) {
            return callback(data);
          });
        };
      })(this), function(error) {
        throw Error(error);
      });
    };

    GeolocationService.prototype.getLocations = function(callback, error) {
      var baseUrl, email, token;
      baseUrl = this.Constant.baseUrl + '/locations';
      email = localStorage.getItem('email');
      token = localStorage.getItem('token');
      return this.$http({
        url: "" + baseUrl + "?user_email=" + email + "&user_token=" + token,
        method: 'GET',
        cache: false
      }).success(function(data, status, headers, config) {
        return callback(data);
      }).error(function(data) {
        throw Error(error);
      });
    };

    GeolocationService.prototype.createLocation = function(callback) {
      var baseUrl, email, location, token;
      baseUrl = this.Constant.baseUrl + '/locations';
      location = getLocation();
      email = localStorage.getItem('email');
      token = localStorage.getItem('token');
      return this.$http({
        method: 'POST',
        url: baseUrl + ("?user_email=" + email + "&user_token=" + token),
        data: "address=" + location.address + "&lat=" + location.lat + "&lng=" + location.lng,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }).success(function(data) {
        return callback(data);
      });
    };

    GeolocationService.prototype.deleteLocation = function(item, callback) {
      var baseUrl, email, token;
      baseUrl = this.Constant.baseUrl + '/locations';
      email = localStorage.getItem('email');
      token = localStorage.getItem('token');
      return this.$http({
        method: 'DELETE',
        url: baseUrl + ("?user_email=" + email + "&user_token=" + token + "&id=" + item.id),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }).success(function(data) {
        console.log("=====", data);
        return callback(data);
      });
    };

    getLocation = function() {
      var location;
      location = {};
      location.address = localStorage.getItem('cur_address_detail');
      location.lat = localStorage.getItem('cur_lat');
      location.lng = localStorage.getItem('cur_lng');
      return location;
    };

    return GeolocationService;

  })();

  libr.service('GeolocationService', GeolocationService);

}).call(this);

(function() {
  var RecommendService, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.services.recommend', []);

  RecommendService = (function() {
    RecommendService.$injector = ['GeolocationService', '$http', 'Constant'];

    function RecommendService(GeolocationService, $http, Constant) {
      this.GeolocationService = GeolocationService;
      this.$http = $http;
      this.Constant = Constant;
      this.changeRecommendAction = __bind(this.changeRecommendAction, this);
      this.popularBooksAroundMe = __bind(this.popularBooksAroundMe, this);
    }

    RecommendService.prototype.getActionSheetList = function() {
      var actionList;
      actionList = [];
      actionList.push({
        text: "你可能喜欢的书"
      });
      this.GeolocationService.getLocations((function(_this) {
        return function(locations) {
          var locationIds;
          locationIds = [];
          locations.map(function(location) {
            locationIds.push(location.id);
            location = {
              text: "" + location.address + "附近流行的书"
            };
            return actionList.push(location);
          });
          localStorage.setItem('recommend_action_sheet_arr', JSON.stringify(locationIds));
          return localStorage.setItem('recommend_action_sheet_full_arr', JSON.stringify(actionList));
        };
      })(this));
      return actionList;
    };

    RecommendService.prototype.popularBooksForMe = function(callback, error) {
      var email, token;
      email = localStorage.getItem('email');
      token = localStorage.getItem('token');
      return this.$http({
        url: this.Constant.baseUrl + ("/recommend/me?user_email=" + email + "&user_token=" + token),
        method: 'GET',
        timeout: 13000
      }).success(function(data, status, headers, config) {
        return callback(data);
      }).error(function(data) {
        return error(data);
      });
    };

    RecommendService.prototype.popularBooksAroundMe = function(locationId, callback, error) {
      var email, token;
      email = localStorage.getItem('email');
      token = localStorage.getItem('token');
      return this.$http({
        url: this.Constant.baseUrl + ("/recommend/locations/" + locationId + "?user_email=" + email + "&user_token=" + token),
        method: 'GET',
        timeout: 13000
      }).success(function(data, status, headers, config) {
        console.log('数据', data);
        return callback(data);
      }).error(function(data) {
        return error(data);
      });
    };

    RecommendService.prototype.changeRecommendAction = function(index, callback, error) {
      var locations;
      if (index === 0) {
        return this.popularBooksForMe(callback, error);
      } else {
        locations = JSON.parse(localStorage.getItem('recommend_action_sheet_arr'));
        return this.popularBooksAroundMe(locations[index - 1], function(result) {
          console.log('callback....', result);
          return callback(result);
        }, function(errorMessage) {
          return error(errorMessage);
        });
      }
    };

    return RecommendService;

  })();

  libr.service('RecommendService', RecommendService);

}).call(this);

(function() {
  var ScanService, libr;

  libr = angular.module('libr.services.scan', []);

  ScanService = (function() {
    ScanService.$inject = ['Books'];

    function ScanService(Books) {
      this.Books = Books;
    }

    ScanService.prototype.scan = function(callback, errorCallback) {
      setTimeout((function(_this) {
        return function() {
          return cordova.plugins.barcodeScanner.scan(function(result) {
            console.log('got scan result', result);
            if (result.cancelled === 1) {
              return;
            }
            if (result.format !== 'EAN_13') {
              errorCallback('条形码类型不匹配，请确认所扫为书籍，并尝试更换角度');
              return;
            }
            return _this.Books.save({
              isbn: result.text
            }, null, function(data) {
              console.log('get server response');
              if (data.status === 'error') {
                return errorCallback(data.message);
              } else {
                return callback(data);
              }
            }, function(data, status) {
              console.log('错误', status);
              return errorCallback('添加图书失败' + data.message);
            });
          }, function(error) {
            return errorCallback("扫描图书失败:" + error + " ");
          });
        };
      })(this), 600);
      return navigator.notification.vibrate(50);
    };

    return ScanService;

  })();

  libr.service('ScanService', ScanService);

}).call(this);

(function() {
  var BooksController, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.controllers.books', ['ionic']);

  BooksController = (function() {
    BooksController.$inject = ['$scope', 'Books', 'ScanService', '$ionicModal', 'DoubanService', 'IonicUtils'];

    function BooksController($scope, Books, ScanService, $ionicModal, DoubanService, IonicUtils) {
      var currentPage;
      this.$scope = $scope;
      this.Books = Books;
      this.ScanService = ScanService;
      this.$ionicModal = $ionicModal;
      this.DoubanService = DoubanService;
      this.IonicUtils = IonicUtils;
      this.submitDoubanUser = __bind(this.submitDoubanUser, this);
      this.scanBooks = __bind(this.scanBooks, this);
      this.searchDoubanUser = __bind(this.searchDoubanUser, this);
      this.closeDialog = __bind(this.closeDialog, this);
      this.loadMore = __bind(this.loadMore, this);
      this.refresh = __bind(this.refresh, this);
      currentPage = localStorage.setItem('user_books_current_page', 0);
      this.$scope.books = [];
      this.$scope.moreItemsAvailable = true;
      this.$scope.submitAllowed = false;
      this.$ionicModal.fromTemplateUrl('templates/modal/import_books.html', (function(_this) {
        return function(modal) {
          return _this.$scope.modal = modal;
        };
      })(this), {
        scope: this.$scope,
        animation: 'slide-in-up'
      });
      this.$scope.data = {
        isLoading: false,
        text: null
      };
      this.IonicUtils.initCustomLoading(this.$scope);
      this.$scope.onRefresh = this.refresh;
      this.$scope.loadMore = this.loadMore;
      this.$scope.closeDialog = this.closeDialog;
      this.$scope.searchDoubanUser = this.searchDoubanUser;
      this.$scope.scanBooks = this.scanBooks;
      this.$scope.submitDoubanUser = this.submitDoubanUser;
      this.$scope.doubanInputDisabled = false;
    }

    BooksController.prototype.refresh = function() {
      var afterBookId;
      afterBookId = localStorage.getItem('user_max_book_id');
      return this.Books.fetchNew({
        afterId: afterBookId
      }, (function(_this) {
        return function(data) {
          _this.$scope.$broadcast('scroll.refreshComplete');
          if (data.books.length !== 0) {
            localStorage.setItem('user_max_book_id', data.books[0].id);
            return data.books.forEach(function(item, index, array) {
              return _this.$scope.books.push(item);
            });
          }
        };
      })(this));
    };

    BooksController.prototype.loadMore = function() {
      var currentPage, maxPage;
      currentPage = localStorage.getItem('user_books_current_page');
      maxPage = localStorage.getItem('user_books_max_page');
      maxPage = parseInt(maxPage);
      currentPage = parseInt(currentPage);
      if (!(currentPage >= maxPage)) {
        return this.Books.query({
          page: currentPage + 1
        }, (function(_this) {
          return function(data) {
            if (data.books.length !== 0) {
              localStorage.setItem('user_max_book_id', data.books[0].id);
              localStorage.setItem('user_books_current_page', data.current_page);
              localStorage.setItem('user_books_max_page', data.total_page);
              data.books.forEach(function(item, index, array) {
                return _this.$scope.books.push(item);
              });
            } else {
              _this.$scope.moreItemsAvailable = false;
            }
            return _this.$scope.$broadcast('scroll.infiniteScrollComplete');
          };
        })(this));
      } else {
        this.$scope.$broadcast('scroll.infiniteScrollComplete');
        return this.$scope.moreItemsAvailable = false;
      }
    };

    BooksController.prototype.closeDialog = function() {
      return this.$scope.modal.hide();
    };

    BooksController.prototype.searchDoubanUser = function(user) {
      if (user === void 0 || user.trim() === '') {
        return this.IonicUtils.showLoading(this.$scope, '请输入有效昵称');
      } else {
        return this.DoubanService.userInfo(user, (function(_this) {
          return function(data) {
            _this.$scope.resultEnabled = true;
            _this.$scope.submitAllowed = true;
            return _this.$scope.doubanUser = data;
          };
        })(this), (function(_this) {
          return function(error) {
            console.log(error);
            _this.$scope.resultEnabled = false;
            return _this.$scope.submitAllowed = false;
          };
        })(this));
      }
    };

    BooksController.prototype.scanBooks = function() {
      return this.ScanService.scan((function(_this) {
        return function(result) {
          navigator.notification.alert("添加图书《" + result.book.name + "》成功", null, "Libr", "确定");
          return _this.$scope.books.unshift(result.book);
        };
      })(this), (function(_this) {
        return function(msg) {
          alert('扫描出错了。。。' + msg);
          return _this.IonicUtils.showLoading(_this.$scope, msg);
        };
      })(this));
    };

    BooksController.prototype.submitDoubanUser = function() {
      var username;
      username = angular.element(document.getElementById('douban-username'));
      username = username.val();
      return this.DoubanService.submitUser(username, (function(_this) {
        return function(data) {
          _this.$scope.doubanInputDisabled = true;
          return alert('成功绑定豆瓣用户', function(data) {
            return _this.IonicUtils.showLoading(_this.$scope, '绑定豆瓣用户失败，请稍后再试');
          });
        };
      })(this));
    };

    return BooksController;

  })();

  libr.controller('BooksController', BooksController);

}).call(this);

(function() {
  var BookDetailController, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.controllers', ['ionic']);

  BookDetailController = (function() {
    BookDetailController.$inject = ['$scope', '$stateParams', 'Books', '$window', '$ionicModal', 'Comments'];

    function BookDetailController($scope, $stateParams, Books, $window, $ionicModal, Comments) {
      this.$scope = $scope;
      this.$stateParams = $stateParams;
      this.Books = Books;
      this.$window = $window;
      this.$ionicModal = $ionicModal;
      this.Comments = Comments;
      this.back = __bind(this.back, this);
      this.doComment = __bind(this.doComment, this);
      this.closeCommentDialog = __bind(this.closeCommentDialog, this);
      this.openCommentDialog = __bind(this.openCommentDialog, this);
      this.$scope.openDialog = this.openCommentDialog;
      this.$scope.closeDialog = this.closeCommentDialog;
      this.$scope.doComment = this.doComment;
      this.$scope.back = this.back;
      this.$ionicModal.fromTemplateUrl('templates/modal/comment.html', (function(_this) {
        return function(modal) {
          return _this.$scope.modal = modal;
        };
      })(this), {
        scope: this.$scope,
        animation: 'slide-in-up'
      });
      console.log('====');
      this.Books.get({
        book_id: this.$stateParams.isbn
      }, (function(_this) {
        return function(result) {
          _this.$scope.book = result;
          _this.$scope.usersAccount = result.users.length;
          _this.$scope.bookName = _this.$scope.book.name;
          return _this.Comments.query({
            book_id: result.id
          }, function(data) {
            console.log(data, '!!!!!');
            return _this.$scope.comments = data;
          });
        };
      })(this));
      this.$scope.$on('$destroy', (function(_this) {
        return function() {
          return _this.$scope.modal.remove();
        };
      })(this));
    }

    BookDetailController.prototype.openCommentDialog = function() {
      return this.$scope.modal.show();
    };

    BookDetailController.prototype.closeCommentDialog = function() {
      return this.$scope.modal.hide();
    };

    BookDetailController.prototype.doComment = function() {
      var text;
      text = angular.element(document.getElementById('comment')).val();
      if (text.trim() === '') {
        alert('请输入有效字符');
        return false;
      } else {
        return this.Comments.save({
          book_id: this.$scope.book.id,
          content: text
        }, null, (function(_this) {
          return function(data) {
            if (data.id === null) {
              return alert('添加图书失败');
            } else {
              console.log('成功。。。。。。。');
              _this.$scope.comments.push(data);
              return _this.closeCommentDialog();
            }
          };
        })(this));
      }
    };

    BookDetailController.prototype.back = function() {
      return this.$window.history.back();
    };

    return BookDetailController;

  })();

  libr.controller('BookDetailController', BookDetailController);

}).call(this);

(function() {
  var HomeController, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.controllers.home', ['ionic']);

  HomeController = (function() {
    var isUserLogedIn, showLoading;

    HomeController.$inject = ['$scope', '$location', 'ScanService', '$ionicLoading', '$ionicActionSheet', 'RecommendService', 'ErrorHandler'];

    function HomeController($scope, $location, ScanService, $ionicLoading, $ionicActionSheet, RecommendService, ErrorHandler) {
      this.$scope = $scope;
      this.$location = $location;
      this.$ionicLoading = $ionicLoading;
      this.$ionicActionSheet = $ionicActionSheet;
      this.RecommendService = RecommendService;
      this.ErrorHandler = ErrorHandler;
      this.changeRecommend = __bind(this.changeRecommend, this);
      this.showRecommendActionSheet = __bind(this.showRecommendActionSheet, this);
      this.$scope.showRecommendActionSheet = this.showRecommendActionSheet;
      if (isUserLogedIn()) {
        showLoading(this.$scope, this.$ionicLoading);
        this.$scope.title = '你可能喜欢的书';
        this.RecommendService.popularBooksForMe((function(_this) {
          return function(result) {
            if (result.length === 0) {
              alert('请先添加一些你阅读的书，再来查看推荐吧');
            } else {
              _this.$scope.books = result;
            }
            return _this.$scope.loading.hide();
          };
        })(this), (function(_this) {
          return function(error) {
            return _this.ErrorHandler.loadingHandler(_this.$scope, null);
          };
        })(this));
      } else {
        this.$location.path('/tab/settings');
        return;
      }
    }

    showLoading = function($scope, $ionicLoading) {
      return $scope.loading = $ionicLoading.show({
        content: '加载中',
        animation: 'fade-in',
        showBackdrop: true,
        maxWidth: 200,
        showDelay: 500
      });
    };

    isUserLogedIn = function() {
      if (localStorage.getItem('token') !== null && localStorage.getItem('email') !== null) {
        return true;
      } else {
        return false;
      }
    };

    HomeController.prototype.showRecommendActionSheet = function() {
      return this.$ionicActionSheet.show({
        titleText: 'Libr 为你推荐',
        buttons: this.RecommendService.getActionSheetList(),
        cancelText: '取消',
        cancel: function() {
          return console.log('CANCELLED');
        },
        buttonClicked: (function(_this) {
          return function(index) {
            console.log("" + index + " has been taped");
            _this.changeRecommend(index);
            return true;
          };
        })(this)
      });
    };

    HomeController.prototype.changeRecommend = function(index) {
      var msg;
      msg = '喔，看来附近还没有好书推荐，快去推荐你的朋友也来使用吧！';
      return this.RecommendService.changeRecommendAction(index, (function(_this) {
        return function(result) {
          var listArray;
          if (result.length === 0) {
            return navigator.notification.alert(msg, null, 'libr', '确定');
          } else {
            _this.$scope.books = result;
            listArray = JSON.parse(localStorage.getItem('recommend_action_sheet_full_arr'));
            return _this.$scope.title = listArray[index].text;
          }
        };
      })(this), (function(_this) {
        return function(error) {
          return _this.ErrorHandler.whenError(null);
        };
      })(this));
    };

    return HomeController;

  })();

  libr.controller('HomeCtrl', HomeController);

}).call(this);

(function() {
  var LocationController, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.controllers.location', ['ionic']);

  LocationController = (function() {
    LocationController.$inject = ['$scope', '$location', 'GeolocationService', 'IonicUtils'];

    function LocationController($scope, $location, GeolocationService, IonicUtils) {
      this.$scope = $scope;
      this.$location = $location;
      this.GeolocationService = GeolocationService;
      this.IonicUtils = IonicUtils;
      this.addLocation = __bind(this.addLocation, this);
      this.$scope.addLocation = this.addLocation;
      this.$scope.itemButtons = [
        {
          text: '删除',
          type: 'button-assertive',
          onTap: (function(_this) {
            return function(item) {
              return _this.GeolocationService.deleteLocation(item, function(result) {
                return _this.$scope.locations.splice(_this.$scope.locations.indexOf(item), 1);
              });
            };
          })(this)
        }
      ];
      this.GeolocationService.getLocations((function(_this) {
        return function(locations) {
          return _this.$scope.locations = locations;
        };
      })(this));
      this.GeolocationService.getDetailAddress((function(_this) {
        return function(position) {
          localStorage.setItem('cur_address_detail', position.result.formatted_address);
          localStorage.setItem('cur_lat', position.result.location.lat);
          localStorage.setItem('cur_lng', position.result.location.lng);
          return _this.$scope.address = position.result.formatted_address;
        };
      })(this));
      this.IonicUtils.initCustomLoading(this.$scope);
    }

    LocationController.prototype.addLocation = function() {
      if (this.$scope.locations.length >= 3) {
        return this.IonicUtils.showLoading(this.$scope, '只能创建3个常用的地址哦，你可以尝试删除部分，再添加');
      } else if (localStorage.getItem('cur_address_detail') === null) {
        return this.IonicUtils.showLoading(this.$scope, '定位成功后方可添加常用地址');
      } else {
        return this.GeolocationService.createLocation((function(_this) {
          return function(result) {
            return _this.$scope.locations.push(result);
          };
        })(this));
      }
    };

    return LocationController;

  })();

  libr.controller('LocationController', LocationController);

}).call(this);

(function() {
  var LoginController, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.controllers.login', ['ionic']);

  LoginController = (function() {
    var isUserLogedIn;

    LoginController.$inject = ['$scope', 'AuthService', '$state', '$ionicModal', 'IonicUtils'];

    function LoginController($scope, AuthService, $state, $ionicModal, IonicUtils) {
      this.$scope = $scope;
      this.AuthService = AuthService;
      this.$state = $state;
      this.$ionicModal = $ionicModal;
      this.IonicUtils = IonicUtils;
      this.closeDialog = __bind(this.closeDialog, this);
      this.registerUser = __bind(this.registerUser, this);
      this.registerForm = __bind(this.registerForm, this);
      this.login = __bind(this.login, this);
      if (isUserLogedIn()) {
        this.$state.go('tab.home');
      }
      this.$scope.login = this.login;
      this.$scope.registerForm = this.registerForm;
      this.$scope.registerUser = this.registerUser;
      this.$scope.closeDialog = this.closeDialog;
      this.$ionicModal.fromTemplateUrl('templates/modal/registration.html', (function(_this) {
        return function(modal) {
          return _this.$scope.modal = modal;
        };
      })(this), {
        scope: this.$scope,
        animation: 'slide-in-up'
      });
      this.IonicUtils.initCustomLoading(this.$scope);
    }

    LoginController.prototype.login = function(user) {
      if (!user || user.email === '' || user.password === '' || user.email === void 0 || user.password === void 0) {
        this.IonicUtils.showLoading(this.$scope, '请输入有效的用户名和密码');
        return;
      }
      return this.AuthService.login(user, (function(_this) {
        return function(result) {
          localStorage.setItem('token', result.user.token);
          localStorage.setItem('avatar', result.user.avatar);
          localStorage.setItem('username', result.user.name);
          localStorage.setItem('email', user.email);
          localStorage.setItem('user', JSON.stringify(result.user));
          return _this.$state.go('tab.home');
        };
      })(this), (function(_this) {
        return function(data) {
          return _this.IonicUtils.showLoading(_this.$scope, data);
        };
      })(this));
    };

    isUserLogedIn = function() {
      if (localStorage.getItem('token') !== null && localStorage.getItem('email') !== null) {
        return true;
      } else {
        return false;
      }
    };

    LoginController.prototype.registerForm = function() {
      return this.$scope.modal.show();
    };

    LoginController.prototype.registerUser = function(user) {
      if (!user || user.email === '' || user.password === '' || user.email === void 0 || user.password === void 0) {
        this.IonicUtils.showLoading(this.$scope, '请输入有效的用户名和密码');
      } else {
        return this.AuthService.register(user, (function(_this) {
          return function(result, status) {
            if (status === 201) {
              alert('注册成功，请返回登录');
              return _this.$scope.modal.hide();
            } else {
              return _this.IonicUtils.showLoading(_this.$scope, '注册失败,请确认是否输入正确，并重试');
            }
          };
        })(this), (function(_this) {
          return function(error) {
            _this.IonicUtils.showLoading(_this.$scope, '注册失败,请确认是否输入正确，并重试');
            return console.log("registerError", error);
          };
        })(this));
      }
    };

    LoginController.prototype.closeDialog = function() {
      return this.$scope.modal.hide();
    };

    return LoginController;

  })();

  libr.controller('LoginController', LoginController);

}).call(this);

(function() {
  var MainController, libr;

  libr = angular.module('libr.controllers.main', ['ionic']);

  MainController = (function() {
    MainController.$inject = ['$scope', '$location', '$ionicModal', '$state'];

    function MainController($scope, $location, $ionicModal, $state) {
      this.$scope = $scope;
      this.$location = $location;
      this.$ionicModal = $ionicModal;
      this.$state = $state;
    }

    return MainController;

  })();

  libr.controller('MainCtrl', MainController);

}).call(this);

(function() {
  var SettingsController, libr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  libr = angular.module('libr.controllers.settings', ['ionic']);

  SettingsController = (function() {
    var isUserLogedIn;

    SettingsController.$inject = ['$scope', '$ionicModal', 'AuthService', '$state', '$cacheFactory'];

    function SettingsController($scope, $ionicModal, AuthService, $state, $cacheFactory) {
      this.$scope = $scope;
      this.$ionicModal = $ionicModal;
      this.AuthService = AuthService;
      this.$state = $state;
      this.$cacheFactory = $cacheFactory;
      this.logout = __bind(this.logout, this);
      this.$scope.logout = this.logout;
      this.$scope.feedback = this.feedback;
      this.$scope.showMe = this.showMe;
      if (isUserLogedIn()) {
        this.$scope.isLogedIn = true;
      } else {
        this.$scope.isLogedIn = false;
      }
      this.$scope.avatar = localStorage.getItem('avatar');
      this.$scope.username = localStorage.getItem('username');
    }

    SettingsController.prototype.logout = function() {
      var httpDefaultCache;
      localStorage.clear();
      httpDefaultCache = this.$cacheFactory.get('$http');
      console.log('cacheFactory', httpDefaultCache);
      httpDefaultCache.removeAll();
      return this.$state.go('login');
    };

    SettingsController.prototype.feedback = function() {
      return window.open('https://jinshuju.net/f/F96z3s', '_blank', 'location=no');
    };

    SettingsController.prototype.showMe = function() {
      return window.open('http://libr.herokuapp.com', '_blank', 'location=no');
    };

    isUserLogedIn = function() {
      if (localStorage.getItem('token') !== null && localStorage.getItem('email') !== null) {
        return true;
      } else {
        return false;
      }
    };

    return SettingsController;

  })();

  libr.controller('SettingsController', SettingsController);

}).call(this);

(function() {
  var Constant, libr;

  libr = angular.module('libr.constant', []);

  Constant = {};

  Constant.baseUrl = "http://192.168.0.101:3000/api/v1";

  libr.constant('Constant', Constant);

}).call(this);
